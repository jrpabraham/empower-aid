# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
model <- lm(equation, data = data, na.action = na.omit)
model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
# model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar))
# equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
# model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
model <- lm(equation, data = data, na.action = na.omit)
model$vcov <- cluster.vcov(model, cluster = data$survey.id)
stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
Graph <- ggplot(stats,
aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
ggtitle(title) +
labs(y = ytitle, x = xtitle) +
coord_cartesian(ylim = bounds) +
theme_classic(base_size = 9, base_family = "sans") +
geom_bar(stat = "identity", width = .66) +
geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 5),
legend.position = "none")+
scale_fill_manual(values = fillcolor)
return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), as.data.frame(stats[, 3] / sqrt(stats[, 4])))
colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
Graph <- ggplot(stats,
aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
ggtitle(title) +
labs(y = ytitle, x = xtitle) +
coord_cartesian(ylim = bounds) +
theme_classic(base_size = 9, base_family = "sans") +
geom_bar(stat = "identity", width = .66) +
geom_errorbar(aes(ymin = mean - SEM, ymax = mean + SEM), width = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 5),
legend.position = "none")+
scale_fill_manual(values = fillcolor)
return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
vid.graph
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
model <- lm(equation, data = data, na.action = na.omit)
model$vcov <- cluster.vcov(model, cluster = data$survey.id)
stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
Graph <- ggplot(stats,
aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
ggtitle(title) +
labs(y = ytitle, x = xtitle) +
coord_cartesian(ylim = bounds) +
theme_classic(base_size = 9, base_family = "sans") +
geom_bar(stat = "identity", width = .66) +
geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 5),
legend.position = "none")+
scale_fill_manual(values = fillcolor)
return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
# equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
# model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
# model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
vid.graph
table(treat)
lm(vid.num ~ treat)
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), sqrt(diag(model$vcov)))
# colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SEM")
# Graph <- ggplot(stats,
#   aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
#   ggtitle(title) +
#   labs(y = ytitle, x = xtitle) +
#   coord_cartesian(ylim = bounds) +
#   theme_classic(base_size = 9, base_family = "sans") +
#   geom_bar(stat = "identity", width = .66) +
#   geom_errorbar(aes(ymin = mean - 1.96*SEM, ymax = mean + 1.96*SEM), width = 0.2) +
#   theme(panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         panel.background = element_blank(),
#         panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
#         axis.line = element_line(colour = "black"),
#         axis.text.x = element_text(size = 5),
#         legend.position = "none")+
#         scale_fill_manual(values = fillcolor)
# return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#d8d8d8', '#d4776a', '#802215'), bounds = c(0, 2))
##############################
## Install missing packages ##
##############################
setwd("/Users/justin/Repos/empower-aid")
set.seed(47269801)
required.packages <- c("dplyr", "multiwayvcov", "multcomp", "reshape2", "knitr", "flextable", "officer", "forestplot", "iptools", "cowplot", "ggplot2", "matrixStats", "ggthemes", "ggsignif")
packages.missing <- required.packages[!required.packages %in% installed.packages()[,"Package"]]
if(length(packages.missing) > 0) {install.packages(required.packages, repo="https://cran.cnr.berkeley.edu/")}
lapply(required.packages, library, character.only = TRUE)
######################
## Define functions ##
######################
## RegTest conducts asymptotic tests from linear model ##
RegTest <- function(equation, clustvars, hypotheses, data) {
model <- lm(equation, data = data, na.action = na.omit)
if (missing(clustvars)) model$vcov <- vcov(model)
else model$vcov <- cluster.vcov(model, cluster = clustvars)
model$test <- summary(glht(model, linfct = hypotheses, vcov = model$vcov))$test
numhyp <- length(hypotheses)
EST <- matrix(nrow = numhyp, ncol = 5)
for (i in 1:numhyp) {
EST[i, 1] <- model$test$coefficients[i]
EST[i, 2] <- model$test$tstat[i]
EST[i, 3] <- model$test$sigma[i]
EST[i, 4] <- model$test$pvalues[i]
EST[i, 5] <- nobs(model)
}
colnames(EST) <- c("Coefficient", "t-stat", "Std. error", "p-value", "Obs.")
return(EST)
}
## PermTest returns MC approximations of the exact p-value ##
PermTest <- function(equation, treatvars, clustvars, hypotheses, iterations, data) {
stopifnot(length(hypotheses) <= 1)
obsEST <- RegTest(equation, clustvars, hypotheses, data)
obsStat <- obsEST[1, 2]
simEST <- matrix(ncol = 5)
for (i in 1:iterations) {
simTreat <- data[, treatvars, drop = FALSE]
simTreat <- simTreat[sample(nrow(simTreat)),]
simData <- cbind(simTreat, data[, !(names(data) %in% treatvars), drop = FALSE])
colnames(simData)[1:length(treatvars)] <- treatvars
simEST <- rbind(simEST, RegTest(equation, clustvars, hypotheses, data = simData))
}
simSTAT <- simEST[2:nrow(simEST), 2]
countSTAT <- matrix(abs(simSTAT) >= abs(obsStat), ncol = 1)
ExactP <- colSums(countSTAT) / iterations
EST <- matrix(cbind(obsEST, ExactP), nrow = 1, ncol = 6)
colnames(EST) <- c("Coefficient", "t-stat", "Std. error", "p-value", "Obs.", "Exact p-value")
return(EST)
}
## FDR returns minimum q-values ##
FDR <- function(pvals, step) {
if (sum(is.na(pvals) == FALSE) <= 1) {return(pvals)}
if (missing(step)) {step <- 0.001}
allpvals <- cbind(as.matrix(pvals), matrix(1:nrow(as.matrix(pvals)), ncol = 1))
pvals <- na.omit(allpvals)
nump <- nrow(pvals)
pvals <- pvals[order(pvals[, 1]), ]
rank <- matrix(1:nump, ncol = 1)
pvals <- cbind(pvals, rank, matrix(1, nrow = nump, ncol = 1))
qval <- 1
while (qval > 0) {
qfirst <- qval / (1 + qval)
fdrtemp <- (qfirst * rank) / nump
subrank <- which(fdrtemp >= as.matrix(pvals[, 1]))
if (length(subrank) < 1) {
numreject <- 0
} else numreject <- max(subrank)
qsec <- qfirst * (nump / (nump - numreject))
fdrtemp <- (qsec * rank) / nump
subrank <- which(fdrtemp >= as.matrix(pvals[, 1]))
if (length(subrank) < 1) {
numreject <- 0
} else numreject <- max(subrank)
pvals[which(pvals[, 3] <= numreject), 4] <- qval
qval <- qval - step
}
pvals <- pvals[order(pvals[, 2]), ]
qvals <- matrix(nrow = nrow(allpvals), ncol = 1)
qvals[match(pvals[, 2], allpvals[, 2]), 1] <- pvals[, 4]
return(as.matrix(qvals))
}
## Interact returns a string of interacted variables ##
Interact <- function(d, x) {
catstring <- ""
for (var in x) {
catstring <- paste(catstring, " + ", d, "*", var, sep = "")
}
return(substr(catstring, 3, nchar(catstring)))
}
## SumStats creates a table of summary statistics
SumStats <- function(varlist, labels, data) {
M <- matrix(nrow = length(varlist), ncol = 6)
rownames(M) <- varlist
for (var in varlist) {
M[var, 1] <- format(round(mean(na.omit(data[, var])), 3), nsmall = 3)
M[var, 2] <- format(round(sd(na.omit(data[, var])), 3), nsmall = 3)
M[var, 3] <- format(round(median(na.omit(data[, var])), 0), nsmall = 0)
M[var, 4] <- format(round(min(na.omit(data[, var])), 0), nsmall = 0)
M[var, 5] <- format(round(max(na.omit(data[, var])), 0), nsmall = 0)
M[var, 6] <- format(round(length(na.omit(data[, var])), 0), nsmall = 0)
}
table <- cbind(labels, M)
colnames(table) <- c("Variable", "Mean", "Std. dev.", "Median", "Min.", "Max.", "Obs.")
return(table)
}
## FTable creates a FlexTable out of a results matrix
FTable <- function(results, note) {
if(is.data.frame(results) == FALSE) results <- as.data.frame(results)
boldix <- seq(1, 1 + 2 * nrow(results) / 3, nrow(results) / 3)
ftable <- regulartable(results) %>%
align(align = "center") %>%
align(j = 1, part = "body", align = "left") %>%
border_remove() %>%
hline_top(part = "all", border = big_border) %>%
hline_top(part = "body", border = big_border) %>%
hline_bottom(part = "body", border = big_border) %>%
border(i = boldix[-1], border.top = std_border) %>%
bold(i = boldix, j = 1) %>%
add_footer(Outcome = note) %>%
merge_at(j = 1:(ncol(results)), part = "footer") %>%
width(j = 1, width = 2) %>%
width(j = seq(2, ncol(results), 1), width = 0.5) %>%
fontsize(size = 9, part = "all")
return(ftable)
}
################
## Clean data ##
################
## Read data ##
varnames <- as.vector(read.delim(file = "data/U1_MTurk_Eligible.csv", sep = ",", header = FALSE, stringsAsFactors = FALSE, na.strings = "", nrows = 1))
u1_df <- read.delim(file = "data/U1_MTurk_Eligible.csv", sep = ",", header = FALSE, stringsAsFactors = FALSE, na.strings = "", skip = 1, col.names = varnames)
## Treatment assignment ##
u1_df$treat[u1_df$condition == "poverty"] <- 0
u1_df$treat[u1_df$condition == "individual"] <- 1
u1_df$treat[u1_df$condition == "community"] <- 2
u1_df$treat <- factor(u1_df$treat, labels = c("Pov", "Ind", "Com"), levels = c(0, 1, 2))
u1_df$pov <- ifelse(u1_df$condition == "poverty", 1, 0)
u1_df$ind <- ifelse(u1_df$condition == "individual", 1, 0)
u1_df$com <- ifelse(u1_df$condition == "community", 1, 0)
## Recoding vars ##
u1_df$spot1 <- recode(u1_df$spot1,"1=1;2=2;4=3")
u1_df$donation_me <- u1_df$donation_pov_1
u1_df$donation_org <- u1_df$donation_pov_2
u1_df$donated <- as.logical(u1_df$donation_org > 0)
d.donated <- u1_df %>%
dplyr::filter(donated==1)
u1_df$donor_status <- NA
u1_df$donor_status <- u1_df$stat.ladder_14
u1_df$recip.impact_r <- 8-u1_df$recip.impact
u1_df$recip.improve_r <- 8-u1_df$recip.improve
u1_df$recip.ladder_r <- 11-u1_df$recip.ladder_14
## Clean sociodems ##
u1_df$priordonor <- as.numeric(as.logical(u1_df$priorgiving == 2))
u1_df$age <- as.numeric(u1_df$age)
u1_df$gen.fem <- as.numeric(as.logical(u1_df$gender ==2))
u1_df$income.hh <- as.numeric(u1_df$income/sqrt(u1_df$hhsize))
u1_df$hi.income.hh <- as.numeric(as.logical(u1_df$income.hh > 31305))
u1_df$hi.income <- as.numeric(as.logical(u1_df$income > 50000))
u1_df$edu.self.ba <- as.numeric(as.logical(u1_df$educ >4))
u1_df$edu.par.ba <- as.numeric(as.logical(u1_df$educ.parent >4))
u1_df$edu.par.ba <- as.numeric(as.logical(u1_df$educ.parent >4))
u1_df$race.minor <- as.numeric(as.logical(u1_df$race !=1))
u1_df$is.religi <- as.numeric(as.logical(u1_df$religiosity >2))
u1_df$is.chr <- as.numeric(as.logical(u1_df$religion == 6))
u1_df$is.dem <- as.numeric(as.logical(u1_df$party == 3))
# need to add religion dummy
## Center covariates ##
u1_df$priordonor.c <- scale(u1_df$priordonor, scale = FALSE)
u1_df$gen.fem.c <- scale(u1_df$gen.fem, scale = FALSE)
u1_df$hi.income.hh.c <- scale(u1_df$hi.income.hh, scale = FALSE)
u1_df$edu.self.ba.c <- scale(u1_df$edu.self.ba, scale = FALSE)
u1_df$race.minor.c <- scale(u1_df$race.minor, scale = FALSE)
u1_df$is.religi.c <- scale(u1_df$is.religi, scale = FALSE)
u1_df$is.chr.c <- scale(u1_df$is.chr, scale = FALSE)
u1_df$is.dem.c <- scale(u1_df$is.dem, scale = FALSE)
write.csv(u1_df, file = "data/U1_Clean_Data.csv", na = "")
attach(u1_df)
