RES.sec.cov <- cbind(RES.sec.cov, colMeans(k1_df[which(k1_df$com == 1), depvars], na.rm = TRUE))
} else RES.sec.cov <- cbind(RES.sec.cov, colMeans(k1_df[which(k1_df$pov == 1), depvars], na.rm = TRUE))
RES.sec.cov[, 5] <- round(RES.sec.cov[, 5], 0)
RES.sec.cov[, -5] <- format(round(RES.sec.cov[, -5], 3), nsmall = 3)
RES.sec.cov <- cbind(depvarnames, RES.sec.cov)
colnames(RES.sec.cov)[1] <- "Outcome"
colnames(RES.sec.cov)[8] <- "Min. q-value"
colnames(RES.sec.cov)[9] <- "Reference mean"
print("----------------------------------------------------------------", quote = FALSE)
print(paste("H_0:", htitle[i]), quote = FALSE)
print(RES.sec.cov, quote = FALSE)
RES.sec.cov <- rbind(c(htitle[i], "", "", "", "", "", "", "", ""), RES.sec.cov)
RES.print <- rbind(RES.print, RES.sec.cov)
}
RES.print[, c(1:9)] <- RES.print[, c(1, 2, 3, 4, 5, 7, 8, 9, 6)]
colnames(RES.print)[c(1:9)] <- colnames(RES.print)[c(1, 2, 3, 4, 5, 7, 8, 9, 6)]
## Print table to doc ##
appendix <- body_add_par(appendix , " ", style = "Normal") %>%
body_add_par("Treatment effects on secondary outcomes with covariate adjustment", style = "Normal") %>%
body_add_flextable(value = FTable(RES.print[2:nrow(RES.print), c(1:2,4:9)], note = "Note: We include as control variables indicators for being female, for having completed primary schooling, above median age, and unemployment status. Each panel corresponds to a single hypothesis comparing the treatment conditions for the group of outcome variables. The first column reports the mean difference between groups. The second column reports robust standard errors. The third column reports standard p-values. The fourth column reports exact p-values from randomization inference. The fifth column reports the minimum q-values. FDR correction is applied over all outcomes within a hypothesis. The reference mean column lists the mean of the poverty alleviation condition for the first two panels and the mean of the community empowerment condition for the third panel."))
################################################
## Heterogeneous effects for primary outcomes ##
################################################
depvars <- c("vid.num", "sav.amt", "msg.dec")
depvarnames <- c("No. of videos", "Amount saved", "Recorded message")
hetvars <- c("soc.fem", "soc.pri")
hetvarnames <- c("gender (female)", "completion of primary schooling")
for (i in 1:2) {
hypotheses <- c(paste("treatInd:", hetvars[i], " = 0", sep = ""), paste("treatCom:", hetvars[i], " = 0", sep = ""), paste("treatInd:", hetvars[i], " - ", "treatCom:", hetvars[i], " = 0", sep = ""))
htitle <- c("Individual - Poverty", "Community - Poverty", "Individual - Community")
appendix <- body_add_par(appendix , " ", style = "Normal")
RES.print <- matrix(nrow = 1, ncol = 8)
for (j in 1:3) {
RES.pri.het <- matrix(nrow = 1, ncol = 6)
for (depvar in depvars) {
eqn <- paste(depvar, " ~ treat*", hetvars[i], sep = "")
RES.pri.het <- rbind(RES.pri.het, PermTest(eqn, treatvars = c("treat", "pov", "ind", "com"), clustvars = k1_df$survey.id, hypotheses = hypotheses[j], iterations = 5, data = k1_df))
}
RES.pri.het <- RES.pri.het[2:nrow(RES.pri.het), 1:ncol(RES.pri.het)]
RES.pri.het <- cbind(RES.pri.het, FDR(RES.pri.het[, 4]))
RES.pri.het[, 5] <- round(RES.pri.het[, 5], 0)
RES.pri.het[, -5] <- format(round(RES.pri.het[, -5], 3), nsmall = 3)
RES.pri.het <- cbind(depvarnames, RES.pri.het)
colnames(RES.pri.het)[1] <- "Outcome"
colnames(RES.pri.het)[8] <- "Min. q-value"
print("----------------------------------------------------------------", quote = FALSE)
print(paste("H_0:", htitle[j]), quote = FALSE)
print(RES.pri.het, quote = FALSE)
RES.pri.het <- rbind(c(htitle[j], "", "", "", "", "", "", ""), RES.pri.het)
RES.print <- rbind(RES.print, RES.pri.het)
}
RES.print[, c(1:8)] <- RES.print[, c(1, 2, 3, 4, 5, 7, 8, 6)]
colnames(RES.print)[c(1:8)] <- colnames(RES.print)[c(1, 2, 3, 4, 5, 7, 8, 6)]
## Print table to doc ##
appendix <- body_add_par(appendix , " ", style = "Normal") %>%
body_add_par(paste("Heterogeneous treatment effects on primary outcomes by", hetvarnames[i]), style = "Normal") %>%
body_add_flextable(value = FTable(RES.print[2:nrow(RES.print), c(1:2,4:7)], note = "Note: This table reports coefficient estimates on each experimental comparison interacted with a baseline variable. Each panel corresponds to a single hypothesis comparing the treatment conditions for the group of outcome variables. The first column reports the mean difference between groups. The second column reports robust standard errors. The third column reports standard p-values. The fourth column reports exact p-values from randomization inference."))
}
##################################################
## Heterogeneous effects for secondary outcomes ##
##################################################
depvars <- c("sel.score.avg", "sti.score.avg", "aff.score.avg", "ses.lad.now", "ses.lad.y2", "msg.avg", "que.smrd")
depvarnames <- c("Self-Efficacy (avg.)", "Stigma (avg.)", "Affect (avg.)", "Social status", "Anticipated social mobility", "Message support", "Query ordering")
hetvars <- c("soc.fem", "soc.pri")
hetvarnames <- c("gender (female)", "completion of primary schooling")
for (i in 1:2) {
hypotheses <- c(paste("treatInd:", hetvars[i], " = 0", sep = ""), paste("treatCom:", hetvars[i], " = 0", sep = ""), paste("treatInd:", hetvars[i], " - ", "treatCom:", hetvars[i], " = 0", sep = ""))
htitle <- c("Individual - Poverty", "Community - Poverty", "Individual - Community")
appendix <- body_add_par(appendix , " ", style = "Normal")
RES.print <- matrix(nrow = 1, ncol = 8)
for (j in 1:3) {
RES.sec.het <- matrix(nrow = 1, ncol = 6)
for (depvar in depvars) {
eqn <- paste(depvar, " ~ treat*", hetvars[i], sep = "")
RES.sec.het <- rbind(RES.sec.het, PermTest(eqn, treatvars = c("treat", "pov", "ind", "com"), clustvars = k1_df$survey.id, hypotheses = hypotheses[j], iterations = 5, data = k1_df))
}
RES.sec.het <- RES.sec.het[2:nrow(RES.sec.het), 1:ncol(RES.sec.het)]
RES.sec.het <- cbind(RES.sec.het, FDR(RES.sec.het[, 4]))
RES.sec.het[, 5] <- round(RES.sec.het[, 5], 0)
RES.sec.het[, -5] <- format(round(RES.sec.het[, -5], 3), nsmall = 3)
RES.sec.het <- cbind(depvarnames, RES.sec.het)
colnames(RES.sec.het)[1] <- "Outcome"
colnames(RES.sec.het)[8] <- "Min. q-value"
print("----------------------------------------------------------------", quote = FALSE)
print(paste("H_0:", htitle[j]), quote = FALSE)
print(RES.sec.het, quote = FALSE)
RES.sec.het <- rbind(c(htitle[j], "", "", "", "", "", "", ""), RES.sec.het)
RES.print <- rbind(RES.print, RES.sec.het)
}
RES.print[, c(1:8)] <- RES.print[, c(1, 2, 3, 4, 5, 7, 8, 6)]
colnames(RES.print)[c(1:8)] <- colnames(RES.print)[c(1, 2, 3, 4, 5, 7, 8, 6)]
## Print table to doc ##
appendix <- body_add_par(appendix , " ", style = "Normal") %>%
body_add_par(paste("Heterogeneous treatment effects on secondary outcomes by", hetvarnames[i]), style = "Normal") %>%
body_add_flextable(value = FTable(RES.print[2:nrow(RES.print), c(1:2,4:7)], note = "Note: This table reports coefficient estimates on each experimental comparison interacted with a baseline variable. Each panel corresponds to a single hypothesis comparing the treatment conditions for the group of outcome variables. The first column reports the mean difference between groups. The second column reports robust standard errors. The third column reports standard p-values. The fourth column reports exact p-values from randomization inference."))
}
#########################
## Forecasting results ##
#########################
#k1_df is the name of the dataframe
k1_df$vid.imp1 <- k1_df$vid.dec1 %in% c(3, 5)
forecast <-subset(k1_df, select = c(vid.imp1, eva.msg1, eva.msg2, eva.msg3,treat,pov,ind,com,eva.conf, survey.id))
#Recoding into proportion selecting a business video for first video
forecast$eva.m1_rec <- eva.msg1/(10)
forecast$eva.m2_rec <- eva.msg2/(10)
forecast$eva.m3_rec <- eva.msg3/(10)
#Reshaping
forecast.long <- forecast %>% gather(WhichTreat, pred, eva.m1_rec, eva.m1_rec,eva.m2_rec,eva.m3_rec)
#Dummies for own condition
forecast.long$Own<-0
forecast.long$Own[forecast.long$WhichTreat == "eva.m1_rec" & forecast.long$pov == 1] <- 1
forecast.long$Own[forecast.long$WhichTreat == "eva.m2_rec" & forecast.long$ind == 1] <- 1
forecast.long$Own[forecast.long$WhichTreat == "eva.m3_rec" & forecast.long$com == 1] <- 1
refmeans <- c(mean(forecast.long[which(forecast.long$WhichTreat == "eva.m1_rec"), "pred"]), mean(forecast.long[which(forecast.long$WhichTreat == "eva.m1_rec"), "pred"]), mean(forecast.long[which(forecast.long$WhichTreat == "eva.m3_rec"), "pred"]))
## Without controls ##
FR <- RegTest("pred ~ WhichTreat", clustvars = forecast.long$survey.id, hypotheses = c("WhichTreateva.m2_rec = 0", "WhichTreateva.m3_rec = 0", "WhichTreateva.m2_rec - WhichTreateva.m3_rec = 0"), data = forecast.long)
FR <- cbind(FR[, -ncol(FR)], refmeans, FR[, ncol(FR)])
FR <- cbind(format(round(FR[, -ncol(FR)], 3), nsmall = 3), round(FR[, ncol(FR)], 0))
FR <- cbind(c("Individual = Poverty", "Community = Poverty", "Individual = Community"), FR[, -2])
## With controls ##
FRC <- RegTest("pred ~ WhichTreat + Own", clustvars = forecast.long$survey.id, hypotheses = c("WhichTreateva.m2_rec = 0", "WhichTreateva.m3_rec = 0", "WhichTreateva.m2_rec - WhichTreateva.m3_rec = 0"), data = forecast.long)
FRC <- cbind(FRC[, -ncol(FRC)], refmeans, FRC[, ncol(FRC)])
FRC <- cbind(format(round(FRC[, -ncol(FRC)], 3), nsmall = 3), round(FRC[, ncol(FRC)], 0))
FRC <- cbind(c("Individual = Poverty", "Community = Poverty", "Individual = Community"), FRC[, -2])
## Combine panels ##
FR.tab <- rbind(c(" ", " ", " ", " ", " ", " "), FR, c("Controlling for own treatment assignment", " ", " ", " ", " ", " "), FRC)
colnames(FR.tab) <- c("Hypothesis", "Coefficient", "Std. error", "p-value", "Reference mean", "Obs.")
## Print table ##
appendix <- body_add_par(appendix , " ", style = "Normal") %>%
body_add_par("Forecasting results", style = "Normal") %>%
body_add_flextable(value = FTable(FR.tab, panels = 2, note = "Note: The dependent variable is the proportion selecting a business video for first video. Each of the 565 participants made three forecasts for a total of 565 x 3 = 1,695 observations. The first and second panels respectively exclude and include a dummy for own treatment assignment. The first column reports the mean difference between groups. The second column reports robust standard errors. The reference mean column lists the mean of the poverty alleviation condition for the first two hypotheses and the mean of the community empowerment condition for the third hypothesis."))
print(appendix, target = here("doc", "K1_appendix.docx"))
###########################
## Stigma coding results ##
###########################
ms.oth.neg.prop <- tidy.codes.sum %>%
group_by(condition.order) %>%
summarise(Prop_Neg = mean(neg.prop, na.rm=TRUE), Prop_Pos = mean(pos.prop, na.rm=TRUE), Prop_Amb=mean(amb.prop, na.rm=T), "n"=sum(!is.na(oth.value)))
kable(ms.oth.neg.prop, digits = round(3))
summary(lm(neg.prop ~ condition.order, data=tidy.codes.sum))
##################################
## Bar graphs for main findings ##
##################################
BarChart <- function(depvar, groupvar, data, title, ytitle, xtitle, fillcolor, bounds, tick) {
quo_groupvar <- enquo(groupvar)
quo_depvar <- enquo(depvar)
# equation <- paste(quo_depvar, " ~ ", quo_groupvar)[2]
# model <- lm(equation, data = data, na.action = na.omit)
# model$vcov <- cluster.vcov(model, cluster = data$survey.id)
# hypotheses <- c(paste(levels(groupvar)[2], "= 0"), paste(levels(groupvar)[3], "= 0"), paste(levels(groupvar)[2], "=", levels(groupvar)[3]))
# model$test <- summary(glht(model, linfct = hypotheses, vcov = model$vcov))$test
stats <- data[complete.cases(depvar), ] %>% group_by(!!quo_groupvar) %>% summarise(mean = mean(!!quo_depvar), sd = sd(!!quo_depvar), obs = length(!!quo_depvar))
stats <- cbind(as.data.frame(table(treat))[, 1], as.data.frame(stats[, 2]), as.data.frame(stats[, 3] / sqrt(stats[, 4])))
colnames(stats) <- c(deparse(substitute(groupvar)), "mean", "SE")
Graph <- ggplot(stats,
aes(!!quo_groupvar, mean, fill = as.factor(!!quo_groupvar))) +
ggtitle(title) +
labs(y = ytitle, x = xtitle) +
coord_cartesian(ylim = bounds) +
theme_classic(base_size = 9, base_family = "sans") +
geom_bar(stat = "identity", width = .66) +
geom_errorbar(aes(ymin = mean - 1.96*SE, ymax = mean + 1.96*SE), width = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(size = .1, color = "black", linetype = "dotted"),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 5),
legend.position = "none") +
scale_fill_manual(values = fillcolor) # +
# scale_y_continuous(breaks = seq(bounds[1], bounds[2], tick))
return(Graph)
}
# Generate figures #
treat <- factor(treat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
vid.graph <- BarChart(depvar = vid.num, groupvar = treat, data = k1_df, ytitle = "No. of videos (0-2)", title = "Skills building", xtitle = "", fillcolor = c('#c6c6c7', '#7ca6c0', '#c05746'), bounds = c(1, 1.75))
sel.graph <- BarChart(depvar = sel.score.avg, groupvar = treat, data = k1_df, ytitle = "Self-rating (1-5)", title = "Self-efficacy", xtitle = "", fillcolor = c('#c6c6c7', '#7ca6c0', '#c05746'), bounds = c(3, 3.75))
sti.graph <- BarChart(depvar = sti.score.avg, groupvar = treat, data = k1_df, ytitle = "Self-rating (1-5)", title = "Stigma", xtitle = "", fillcolor = c('#c6c6c7', '#7ca6c0', '#c05746'), bounds = c(2, 2.75))
ses.lad.y2.graph <- BarChart(depvar = ses.lad.y2, groupvar = treat, data = k1_df, title = "Anticipated social mobility", ytitle = "Ladder score (1-10)", xtitle = "", fillcolor = c('#c6c6c7', '#7ca6c0', '#c05746'), bounds = c(mean(ses.lad.y2, na.rm = TRUE) - 0.5 * sd(ses.lad.y2, na.rm = TRUE), mean(ses.lad.y2, na.rm = TRUE) + 0.5 * sd(ses.lad.y2, na.rm = TRUE)))
# Annotate with significance levels #
vid.graph <- vid.graph +
geom_signif(comparisons = list(c("Poverty \n Alleviation", "Individual \n Empowerment")), annotations = ".", textsize = 7, y_position = 1.5, vjust = -0.2) +
geom_signif(comparisons=list(c("Poverty \n Alleviation", "Community \n Empowerment")), annotations = "*", textsize = 5, y_position = 1.625, vjust = 0.2)
sel.graph <- sel.graph +
geom_signif(comparisons = list(c("Poverty \n Alleviation", "Individual \n Empowerment")), annotations = "*", textsize = 5, y_position = 3.525, vjust = 0.2) +
geom_signif(comparisons=list(c("Poverty \n Alleviation", "Community \n Empowerment")), annotations = "*", textsize = 5, y_position = 3.625, vjust = 0.2)
sti.graph <- sti.graph +
geom_signif(comparisons=list(c("Poverty \n Alleviation", "Community \n Empowerment")), annotations = "*", textsize = 5, y_position = 2.7, vjust = 0.2)
ses.lad.y2.graph <- ses.lad.y2.graph +
geom_signif(comparisons = list(c("Poverty \n Alleviation", "Individual \n Empowerment")), annotations = "*", textsize = 5, y_position = 6.55, vjust = 0.2) +
geom_signif(comparisons=list(c("Poverty \n Alleviation", "Community \n Empowerment")), annotations = "*", textsize = 5, y_position = 6.75, vjust = 0.2)
# Arrange figures in grid #
Figure1 <- plot_grid(vid.graph, sel.graph, ses.lad.y2.graph, sti.graph, nrow = 1, ncol = 4, labels = c("A. Economic Behavior", "B. Psychological Outcomes", "", ""), label_size = 12, scale = 0.85, hjust = -0.2)
save_plot(here("graphics", "Figure1.png"), Figure1, base_height = 3, base_width = 10, dpi=300)
################################
## Forecasting bar graph (2A) ##
################################
attach(forecast.long)
WhichTreat <- factor(WhichTreat, labels = c("Poverty \n Alleviation", "Individual \n Empowerment", "Community \n Empowerment"))
for.stats <- forecast.long[complete.cases(pred), ] %>% group_by(WhichTreat) %>% summarise(mean = mean(pred), sd = sd(pred), obs = length(pred))
for.stats <- cbind(as.data.frame(c("Forecast results", "Forecast results", "Forecast results")), as.data.frame(table(WhichTreat))[, 1], as.data.frame(for.stats[, 2]), as.data.frame(for.stats[, 3] / sqrt(for.stats[, 4])))
colnames(for.stats) <- c("type", "treat", "mean", "SE")
attach(k1_df)
exp.stats <- k1_df[complete.cases(vid.imp1), ] %>% group_by(treat) %>% summarise(mean = mean(vid.imp1), sd = sd(vid.imp1), obs = length(vid.imp1))
exp.stats <- cbind(as.data.frame(c("Experimental results", "Experimental results", "Experimental results")), as.data.frame(table(treat))[, 1], as.data.frame(exp.stats[, 2]), as.data.frame(exp.stats[, 3] / sqrt(exp.stats[, 4])))
colnames(exp.stats) <- c("type", "treat", "mean", "SE")
Fig2aData <- rbind(exp.stats, for.stats)
## Plot means ##
Figure2A <- ggplot(Fig2aData, aes(fill=treat, y=mean, x=type)) +
geom_bar(position = position_dodge(width=0.9), stat = "identity", width = .7) +
ggtitle("A. Comparison of forecasts \n to experimental results") +
geom_errorbar(aes(x = type, ymin = mean - 1.96 * SE, ymax = mean + 1.96 * SE), position = position_dodge(width=0.9), width=.3, size=0.7) +
scale_fill_manual(values=c('#c6c6c7', '#7ca6c0', '#c05746')) +
labs(y = "Prop. selecting a business skills video first", x ="") +
coord_cartesian(ylim=c(0.4, 0.85)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(size = .15, color = "black", linetype = "dotted"),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(size=10, face="bold"),
text = element_text(size=8)) +
geom_signif(y_position=c(0.82, 0.67, 0.72), xmin=c(0.7, 1.7, 1.7), xmax=c(1.3, 2, 2.3), annotation=c("*", "*", "*"), vjust = 0.2)
###############################
## Histogram of video choice ##
###############################
h <- ggplot(k1_df, aes(x= vid.num,  group=condition.order)) + geom_bar(aes(y = ..prop.., stat="count")) + facet_grid(~condition.order) + geom_text(aes( label = scales::percent(..prop..), y= ..prop.. ), stat= "count", vjust = -.5) + labs(y = "Percent") + guides(fill = FALSE) + xlab("Number of business videos chosen") + scale_y_continuous(labels = scales::percent) + ggtitle("Histogram of video choice by condition")
h + aes(fill = condition.order) + scale_fill_manual(values = c('#c6c6c7', '#7ca6c0', '#c05746'))
##################################
## Figures for synthetic pilots ##
##################################
library(rstudioapi) # load it
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
# Load data ####################################################################
# load("data/k1_df.rda")
################################################################################
# Random sample function #######################################################
randomSample = function(df,n) {
return (df[sample(nrow(df), n),])
}
################################################################################
# For experimental results #####################################################
simulatorEXP <- function(df, n_sims, sample_n) {
OneSim<-function(df, sample_n){
smallerDF<-randomSample(df, sample_n)
ATEs<-summary(lm(vid.imp1~as.factor(treat), data=smallerDF))$coefficient[2:3,c(1,4)] %>%
as.vector %>% matrix(ncol = 4) %>% data.frame()
return(ATEs)
names(ATEs) <- c("A","B","Ap","Bp")
}
# Run sim n_sims times with given parameters
sims_dt <- lapply(
X = 1:n_sims,
FUN = function(i) OneSim(df, sample_n)) %>%
bind_rows()
# Return sim_dt
return(sims_dt)
}
################################################################################
# For forecasting results######################################################
simulatorFOR <- function(df, n_sims, sample_n) {
OneSimFOR<-function(df, sample_n){
smallerDF<-randomSample(df, sample_n)
smallerDF.forecast.long <- smallerDF %>% gather(WhichTreat, pred, eva.msg1, eva.msg2, eva.msg3)
ATEs<-summary(lm(pred~as.factor(WhichTreat),
data=smallerDF.forecast.long))$coefficient[2:3,c(1,4)] %>%
as.vector %>%
matrix(ncol = 4) %>%
data.frame()
return(ATEs)
names(ATEs) <- c("A","B","Ap","Bp")
}
# Run n_sims times with given parameters
sims_dt <- lapply(
X = 1:n_sims,
FUN = function(i) OneSimFOR(df, sample_n)) %>%
bind_rows()
# Return sim_dt
return(sims_dt)
}
################################################################################
# Simulations ##################################################################
#Recode forecasts:
forecast$eva.msg1<-forecast$eva.msg1/10
forecast$eva.msg2<-forecast$eva.msg2/10
forecast$eva.msg3<-forecast$eva.msg3/10
#Range of sample sizes
minsize=30
maxsize=150
numsims <- 5
#Experimental
B1_EXP <- matrix(nrow=(maxsize-minsize), ncol=1)
B2_EXP <- matrix(nrow=(maxsize-minsize), ncol=1)
B1p_EXP <- matrix(nrow=(maxsize-minsize), ncol=1)
B2p_EXP <- matrix(nrow=(maxsize-minsize), ncol=1)
for(i in minsize:maxsize){
TEMP <- simulatorEXP(k1_df, numsims, i)
B1_EXP[i-(minsize-1)]<-as.vector(TEMP[1])
B2_EXP[i-(minsize-1)]<-TEMP[2]
B1p_EXP[i-(minsize-1)]<-TEMP[3]
B2p_EXP[i-(minsize-1)]<-TEMP[4]
}
B1_EXP_DF= as.data.frame(t(as.data.frame(B1_EXP)))
B2_EXP_DF= as.data.frame(t(as.data.frame(B2_EXP)))
B1p_EXP_DF= as.data.frame(t(as.data.frame(B1p_EXP)))
B2p_EXP_DF= as.data.frame(t(as.data.frame(B2p_EXP)))
#Forecasting
B1_FOR <- matrix(nrow=(maxsize-minsize), ncol=1)
B2_FOR <- matrix(nrow=(maxsize-minsize), ncol=1)
B1p_FOR <- matrix(nrow=(maxsize-minsize), ncol=1)
B2p_FOR <- matrix(nrow=(maxsize-minsize), ncol=1)
for(i in minsize:maxsize){
TEMP <- simulatorFOR(forecast, numsims, i)
B1_FOR[i-(minsize-1)]<-TEMP[1]
B2_FOR[i-(minsize-1)]<-TEMP[2]
B1p_FOR[i-(minsize-1)]<-TEMP[3]
B2p_FOR[i-(minsize-1)]<-TEMP[4]
}
B1_FOR_DF= as.data.frame(t(as.data.frame(B1_FOR)))
B2_FOR_DF= as.data.frame(t(as.data.frame(B2_FOR)))
B1p_FOR_DF= as.data.frame(t(as.data.frame(B1p_FOR)))
B2p_FOR_DF= as.data.frame(t(as.data.frame(B2p_FOR)))
B1_EXP_DF_ERROR<- -abs(B1_EXP_DF-0.0697)
B1_Exp_MeanError<-as.data.frame(rowMeans(B1_EXP_DF_ERROR))
B2_EXP_DF_ERROR<- -abs(B2_EXP_DF-0.1292)
B2_Exp_MeanError<-as.data.frame(rowMeans(B2_EXP_DF_ERROR))
B1_FOR_DF_ERROR<- -abs(B1_FOR_DF-0.0697)
B1_FOR_MeanError<-as.data.frame(rowMeans(B1_FOR_DF_ERROR))
B2_FOR_DF_ERROR<- -abs(B2_FOR_DF-0.1292)
B2_FOR_MeanError<-as.data.frame(rowMeans(B2_FOR_DF_ERROR))
NUM<-c(minsize:maxsize)%>%as.data.frame()
MeanERR<-bind_cols(B1_Exp_MeanError,B2_Exp_MeanError,B1_FOR_MeanError,B2_FOR_MeanError,  c(minsize:maxsize)%>%as.data.frame())
names(MeanERR)<-c("B1_Exp_MeanError","B2_Exp_MeanError","B1_FOR_MeanError","B2_FOR_MeanError","N")
df2c <- melt(MeanERR, id = "N")
#Figure2B: Negative absolute error
Figure2B <- ggplot(df2c, aes(x = N, y = value, color = variable)) +
geom_smooth(size = 0.8, se = FALSE, aes(linetype = variable)) +
scale_linetype_manual(values = c("solid","solid", "dashed", "dashed"), name="Coefficients (Ref: Poverty Alleviation)",
labels=c("A/B pilot: Ind. Empowerment",
"A/B pilot: Com. Empowerment",
"Forecasting: Ind. Empowerment",
"Forecasting: Com. Empowerment")) +
scale_color_manual(values=c('#7ca6c0', '#c05746','#7ca6c0', '#c05746'),
name="Coefficients (Ref: Poverty Alleviation)",
labels=c("A/B pilot: Ind. Empowerment",
"A/B pilot: Com. Empowerment",
"Forecasting: Ind. Empowerment",
"Forecasting: Com. Empowerment")) +
ggtitle("B. Accuracy of forecasts versus A/B pilots") +
xlab("Bootstrap sample size across all groups") +
ylab("Prediction accuracy (negative absolute error)") +
scale_x_continuous(breaks=seq(25, 150, 25)) +
coord_cartesian(xlim=c(25, 150), ylim=c(-0.2,0)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.grid.major.y = element_line(size = .5, color = "gray", linetype = "dashed"),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(size = 10),
legend.position = c(0.8, 0.15),
plot.title = element_text(size=10, face="bold"),
text = element_text(size=8)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 1.5, keyheight = 0.7),
colour=guide_legend(keywidth = 1.5, keyheight = 0.7))
Figure2 <- plot_grid(Figure2A, Figure2B, nrow = 1, ncol = 2, rel_widths = c(1, 1.61803398875))
save_plot(here("graphics", "Figure2.png"), Figure2, base_height = 4, base_width = 8, dpi=300)
#Figure S2
#B1 Experimental
B1_EXP_DF_T<-bind_cols(as.data.frame(B1_EXP),rep(c("B1_EXP"), times = numsims)%>%as.data.frame)
names(B1_EXP_DF_T)<-c(sprintf("N%d", 30:150),"VAR")
B1_EXP_DF_T <- reshape(data=B1_EXP_DF_T, idvar="SIZE",
varying = c(sprintf("N%d", 30:150)),
v.names = c("COEF"),
times = c(sprintf("N%d", 30:150)),
direction = "long")
#B2 Experimental
B2_EXP_DF_T<-bind_cols(as.data.frame(B2_EXP),rep(c("B2_EXP"), times = numsims)%>%as.data.frame)
names(B2_EXP_DF_T)<-c(sprintf("N%d", 30:150),"VAR")
B2_EXP_DF_T <- reshape(data=B2_EXP_DF_T, idvar="SIZE",
varying = c(sprintf("N%d", 30:150)),
v.names = c("COEF"),
times = c(sprintf("N%d", 30:150)),
direction = "long")
#B1 Forecasting
B1_FOR_DF_T<-bind_cols(as.data.frame(B1_FOR),rep(c("B1_FOR"), times = numsims)%>%as.data.frame)
names(B1_FOR_DF_T)<-c(sprintf("N%d", 30:150),"VAR")
B1_FOR_DF_T <- reshape(data=B1_FOR_DF_T, idvar="SIZE",
varying = c(sprintf("N%d", 30:150)),
v.names = c("COEF"),
times = c(sprintf("N%d", 30:150)),
direction = "long")
#B2 Forecasting
B2_FOR_DF_T<-bind_cols(as.data.frame(B2_FOR),rep(c("B2_FOR"), times = numsims)%>%as.data.frame)
names(B2_FOR_DF_T)<-c(sprintf("N%d", 30:150),"VAR")
B2_FOR_DF_T <- reshape(data=B2_FOR_DF_T, idvar="SIZE",
varying = c(sprintf("N%d", 30:150)),
v.names = c("COEF"),
times = c(sprintf("N%d", 30:150)),
direction = "long")
#Create data set
DenDat<-bind_rows(B1_EXP_DF_T,B2_EXP_DF_T,B1_FOR_DF_T,B2_FOR_DF_T%>%as.data.frame)
#Create data set
DenDatN50B1<-DenDat[ which(DenDat$time=='N50'
& (DenDat$VAR=='B1_EXP' | DenDat$VAR=='B1_FOR')  ), ]
DenDatN50B2 <-DenDat[ which(DenDat$time=='N50'
& (DenDat$VAR=='B2_EXP' | DenDat$VAR=='B2_FOR')  ), ]
DenDatN100B1<-DenDat[ which(DenDat$time=='N100'
& (DenDat$VAR=='B1_EXP' | DenDat$VAR=='B1_FOR')  ), ]
DenDatN100B2 <-DenDat[ which(DenDat$time=='N100'
& (DenDat$VAR=='B2_EXP' | DenDat$VAR=='B2_FOR')  ), ]
DenDatN150B1<-DenDat[ which(DenDat$time=='N150'
& (DenDat$VAR=='B1_EXP' | DenDat$VAR=='B1_FOR')  ), ]
DenDatN150B2 <-DenDat[ which(DenDat$time=='N150'
& (DenDat$VAR=='B2_EXP' | DenDat$VAR=='B2_FOR')  ), ]
####
#B1
PanelA <- ggplot(DenDatN50B1,
aes(COEF, fill = as.factor(VAR))) +
geom_vline(xintercept = 0.06970, size=.9)+
ggtitle("N=50") +
ylab("") +
theme_classic(base_size = 12) +
scale_x_continuous(limits=c(-.6, .6),name='') +
coord_cartesian(ylim=c(0,20)) +
geom_density(alpha = 1/4) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(size=12, face="bold", hjust=-0.5),
legend.position = "none")
PanelC <- ggplot(DenDatN100B1,
aes(COEF, fill = as.factor(VAR))) +
geom_vline(xintercept = 0.06970, size=.9)+
ggtitle("N=100") +
ylab("") +
theme_classic(base_size = 12) +
scale_x_continuous(limits=c(-.6, .6),name='') +
coord_cartesian(ylim=c(0,20)) +
geom_density(alpha = 1/4) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(size=12, face="bold", hjust=-0.5),
legend.position = "none")
PanelE <- ggplot(DenDatN150B1,
aes(COEF, fill = as.factor(VAR))) +
geom_vline(xintercept = 0.06970, size=.9)+
ggtitle("N=150") +
ylab("") +
theme_classic(base_size = 12) +
scale_x_continuous(limits=c(-.6, .6),name='') +
coord_cartesian(ylim=c(0,20)) +
geom_density(alpha = 1/4) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(size=12, face="bold", hjust=-0.5),
legend.position = "none")
#B2
PanelB <- ggplot(DenDatN50B2,
aes(COEF, fill = as.factor(VAR))) +
geom_vline(xintercept = 0.12916, size=.9)+
ylab("") +
theme_classic(base_size = 12) +
scale_x_continuous(limits=c(-.6, .6),name='') +
coord_cartesian(ylim=c(0,20)) +
geom_density(alpha = 1/4) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none")
PanelD <- ggplot(DenDatN100B2,
aes(COEF, fill = as.factor(VAR))) +
geom_vline(xintercept = 0.12916, size=.9)+
ylab("") +
theme_classic(base_size = 12) +
scale_x_continuous(limits=c(-.6, .6),name='') +
coord_cartesian(ylim=c(0,20)) +
geom_density(alpha = 1/4) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none")
PanelF <- ggplot(DenDatN150B2,
aes(COEF, fill = as.factor(VAR))) +
geom_vline(xintercept = 0.12916, size=.9)+
ylab("") +
theme_classic(base_size = 12) +
scale_x_continuous(limits=c(-.6, .6),name='') +
coord_cartesian(ylim=c(0,20)) +
geom_density(alpha = 1/4) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none")
FigureS2 <- plot_grid(PanelA, PanelB, PanelC, PanelD, PanelE, PanelF, nrow = 3, ncol = 2, labels = c("Individual Empowerment", "Community Empowerment"), scale = 0.8, hjust = -0.2, align="hv")
save_plot(here("graphics", "FigureS2.png"), FigureS2, base_height = 9, base_width = 6, dpi=300)
install.packages("pacman")
sd(tidy.codes.sum$neg.prop)
